---
- name: check if we need to do installer things
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
  register: checkout
  ignore_errors: True

- name: set conditional if the above didn't error
  set_fact:
    towerchk: "{{ checkout.json.version }}"
  when: checkout.json is defined

- name: download tower installer
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ tower_version }}.tar.gz
    dest: /tmp/ansible-tower-setup-{{ tower_version }}.tar.gz
    mode: 0640
  when: towerchk not in tower_version

- name: extract installer
  unarchive:
    src: /tmp/ansible-tower-setup-{{ tower_version }}.tar.gz
    dest: /tmp/
    remote_src: True
  when: towerchk not in tower_version

- name: template inventory file
  template:
    src: inventory 
    dest: /tmp/ansible-tower-setup-{{ tower_version }}/inventory
  when: towerchk != tower_version

- name: run the tower installer
  shell: ./setup.sh chdir=/tmp/ansible-tower-setup-{{ tower_version }}
  when: towerchk not in tower_version

- name: wait for tower to be up
  uri:
    url: https://localhost/api/v1/ping/
    method: GET
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
    force_basic_auth: yes
  register: check2
  until: check2.json is defined and check2.json.version in tower_version
  retries: 10
  delay: 30
  when: towerchk not in tower_version

- name: Post license key
  uri:
    url: https://localhost/api/v1/config/
    method: POST
    user: admin
    password: "{{ tower_pass }}"
    body: "{{ tower_license }}"
    body_format: json
    validate_certs: False
    force_basic_auth: yes
  ignore_errors: True
  when: tower_license is defined

- name: Delete demo inventory
  uri:
    url:  https://localhost/api/v2/inventories/1/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo project
  uri:
    url:  https://localhost/api/v2/projects/4/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo template
  uri:
    url:  https://localhost/api/v2/job_templates/5/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Delete demo credential
  uri:
    url:  https://localhost/api/v2/credentials/1/
    method: DELETE
    user: admin
    password: "{{ tower_pass }}"
    validate_certs: False 
    force_basic_auth: yes
    status_code:
      - 200
      - 201
      - 202
      - 204
      - 400
      - 404
  register: response
  changed_when: response.status == 204

- name: Disable GIT Cert validation
  lineinfile:
    path: /etc/tower/settings.py
    regexp: 'GIT_SSL_NO_VERIFY'
    line: "AWX_TASK_ENV['GIT_SSL_NO_VERIFY'] = 'True'"
  notify: restart tower


